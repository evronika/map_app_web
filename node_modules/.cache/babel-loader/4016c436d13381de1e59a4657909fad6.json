{"ast":null,"code":"import thunk from 'redux-thunk';\nimport { combineReducers } from 'redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { enableBatching } from 'redux-batched-actions';\nimport AppReducer from './App';\nimport CallButtonsReducer from './CallButtons';\n\nconst initStore = () => {\n  // add the middlewares\n  const middlewares = [];\n  middlewares.push(thunk); // add your reducers here\n\n  const reducers = combineReducers({\n    AppReducer,\n    CallButtonsReducer\n  }); // apply the middleware\n\n  let middleware = applyMiddleware(...middlewares); // create the store\n\n  return createStore(enableBatching(reducers), middleware);\n};\n\nexport default initStore;","map":{"version":3,"sources":["/Users/vdzerakh/Documents/map-app/app/src/Components/Store/index.tsx"],"names":["thunk","combineReducers","createStore","applyMiddleware","enableBatching","AppReducer","CallButtonsReducer","initStore","middlewares","push","reducers","middleware"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,cAAT,QAA+B,uBAA/B;AAEA,OAAOC,UAAP,MAAuB,OAAvB;AACA,OAAOC,kBAAP,MAA+B,eAA/B;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACvB;AACA,QAAMC,WAAW,GAAG,EAApB;AACAA,EAAAA,WAAW,CAACC,IAAZ,CAAiBT,KAAjB,EAHuB,CAKvB;;AACA,QAAMU,QAAQ,GAAGT,eAAe,CAAC;AAChCI,IAAAA,UADgC;AAEhCC,IAAAA;AAFgC,GAAD,CAAhC,CANuB,CAWvB;;AACA,MAAIK,UAAU,GAAGR,eAAe,CAAC,GAAGK,WAAJ,CAAhC,CAZuB,CAcvB;;AACA,SAAON,WAAW,CAACE,cAAc,CAACM,QAAD,CAAf,EAA2BC,UAA3B,CAAlB;AACA,CAhBD;;AAkBA,eAAeJ,SAAf","sourcesContent":["import thunk from 'redux-thunk';\nimport { combineReducers } from 'redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { enableBatching } from 'redux-batched-actions';\n\nimport AppReducer from './App';\nimport CallButtonsReducer from './CallButtons';\n\nconst initStore = () => {\n\t// add the middlewares\n\tconst middlewares = [];\n\tmiddlewares.push(thunk);\n\n\t// add your reducers here\n\tconst reducers = combineReducers({\n\t\tAppReducer,\n\t\tCallButtonsReducer,\n\t});\n\n\t// apply the middleware\n\tlet middleware = applyMiddleware(...middlewares);\n\n\t// create the store\n\treturn createStore(enableBatching(reducers), middleware);\n};\n\nexport default initStore;\n"]},"metadata":{},"sourceType":"module"}